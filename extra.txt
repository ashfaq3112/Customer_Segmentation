# Set up the Streamlit app
st.set_page_config(page_title="Customer Segmentation App", layout="centered")

st.title("ðŸ›’Customer Segmentation with ML")
st.write("""This app segments customers based on their annual income and spending score using K-Means clustering.""")

#sidebar for user inputs
st.sidebar.header("Input Customer Data")    
age = st.sidebar.number_input("Age", min_value=1, max_value=100, value=30)
annual_income = st.sidebar.number_input("Annual Income (k$)", min_value=0, max_value=200, value=50)
spending_score = st.sidebar.number_input("Spending Score (1-100)", min_value=1, max_value=100, value=50)

if st.sidebar.button("Predict Segment"):
         # # Prepare the input data
    # input_data = np.array([[annual_income, spending_score]])
    # input_data_scaled = scaler.transform(input_data)
    new_data = np.array([[annual_income, spending_score]])
    
      
    new_scaled = scaler.transform(new_data)
    cluster = kmeans.predict(new_scaled)[0]
    # -----------------------------
    # Define Cluster Names
    # -----------------------------
    cluster_names = {
        0: "ðŸŸ¢ Budget Shoppers",
        1: "ðŸ”µ Premium Customers",
        2: "ðŸŸ¡ Average Shoppers",
        3: "ðŸŸ£ Young Spenders",
        4: "ðŸ”´ Elderly Careful Spenders"
    }

    
    st.success(f"âœ… This customer belongs to **{cluster_names[cluster]}** (Cluster {cluster})")


    # Show Visualization
    st.subheader("ðŸ“Š Cluster Visualization (2D Projection)")
    fig, ax = plt.subplots()
    sns.scatterplot(
        x=kmeans.cluster_centers_[:,0],
        y=kmeans.cluster_centers_[:,1],
        s=200, color="red", label="Centroids"
    )
    ax.scatter(new_scaled[:,0], new_scaled[:,1], c="blue", s=150, label="New Customer")
    plt.legend()
    st.pyplot(fig)
 
    # # Predict the cluster
    # cluster = kmeans.predict(input_data_scaled)[0]

    # # Display the result
    # st.subheader("Predicted Customer Segment")
    # st.write(f"The customer belongs to segment: **{cluster}**")

    # # Optional: Display cluster centers
    # st.subheader("Cluster Centers (scaled)")
    # centers = scaler.inverse_transform(kmeans.cluster_centers_)
    # centers_df = pd.DataFrame(centers, columns=['Annual Income (k$)', 'Spending Score (1-100)'])
    # st.dataframe(centers_df)

    # # Optional: Visualize the clusters
    # st.subheader("Customer Segments Visualization")
    # plt.figure(figsize=(8,6))
    # sns.scatterplot(x=kmeans.cluster_centers_[:,0], y=kmeans.cluster_centers_[:,1], hue=range(len(kmeans.cluster_centers_)), palette="Set2", s=200, legend=None)
    # plt.scatter(input_data_scaled[0,0], input_data_scaled[0,1], color='red', s=100, label='Input Customer')
    # plt.title("Customer Segments (2D Projection)")  
    # plt.xlabel("Annual Income (scaled)")
    # plt.ylabel("Spending Score (scaled)")   
    # plt.legend()
    # st.pyplot(plt)

# -----------------------------
# Upload CSV for Bulk Prediction
# -----------------------------
st.subheader("ðŸ“‚ Upload CSV to Cluster Multiple Customers")

uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])

if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)

    st.write("### Preview of Uploaded Data")
    st.dataframe(data.head())

    # Check if required columns exist
    required_cols = ["Annual Income (k$)", "Spending Score (1-100)"]
    if all(col in data.columns for col in required_cols):
        # # Convert Gender
        # data["Gender"] = data["Gender"].map({"Male": 0, "Female": 1})

        # Scale and Predict
        scaled_data = scaler.transform(data[required_cols])
        data["Cluster"] = kmeans.predict(scaled_data)
        cluster_names = {
        0: "ðŸŸ¢ Budget Shoppers",
        1: "ðŸ”µ Premium Customers",
        2: "ðŸŸ¡ Average Shoppers",
        3: "ðŸŸ£ Young Spenders",
        4: "ðŸ”´ Elderly Careful Spenders"
       }
        data["Cluster Name"] = data["Cluster"].map(cluster_names)

        st.write("### Clustered Data")
        st.dataframe(data.head(10))

        # Save output
        data.to_csv("clustered_customers.csv", index=False)
        st.download_button("ðŸ“¥ Download Clustered Data", data.to_csv(index=False), file_name="clustered_customers.csv")

        # Cluster distribution
        st.write("### ðŸ“Š Cluster Distribution")
        fig, ax = plt.subplots()
        sns.countplot(x="Cluster Name", data=data, palette="Set2", ax=ax)
        plt.xticks(rotation=30)
        st.pyplot(fig)

    else:
        st.error(f"CSV must contain columns: {required_cols}")
